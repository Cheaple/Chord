// RPCs for Chord node comminications

syntax = "proto3";

option go_package = "./chord";

message EmptyMsg {}

message NodeEntry {
    bytes identifier = 1;
    string address = 2;
}

message NodeList {
    repeated NodeEntry entries = 1;
}

message BoolMsg {
    bool success = 1;
}

message KeyMsg {
    string key = 1;
}

message BytesMsg {
    bytes data = 1;
}

service Chord {
    // Locate target identifier in the Chord ring
    rpc Locate(BytesMsg) returns (NodeEntry);

    // Check failure (for check_predecessor() function in the paper)
    rpc Check(EmptyMsg) returns (EmptyMsg);
    
    // Get the target node's current predecessor
    rpc GetPredecessor(EmptyMsg) returns (NodeEntry);

    // Get the target node's successor list
    rpc GetSuccessorList(EmptyMsg) returns (NodeList);

    // Set the target node's predecessor (for notify() function in the paper)
    rpc SetPredecessor(NodeEntry) returns (EmptyMsg);

    // Check whether a key exists in the target node's buckets
    rpc CheckKey(KeyMsg) returns (BoolMsg);
}